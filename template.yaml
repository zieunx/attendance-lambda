# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  attendance-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  createAttendaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-attendance.createAttendanceHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: Attendance
        - DynamoDBCrudPolicy:
            TableName: GitConnection
        - DynamoDBCrudPolicy:
            TableName: User
      Environment:
        Variables:
          # Make table names accessible as environment variables from function code during execution
          ATTENDANCE_TABLE: Attendance
          GIT_CONNECTION_TABLE: GitConnection
          USER_TABLE: User
      Events:
        Api:
          Type: Api
          Properties:
            Path: /attandance
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  # AttendanceTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: Attendance
  #     AttributeDefinitions: # 속성 정의 추가
  #       - AttributeName: userGithubId
  #         AttributeType: S
  #       - AttributeName: eventDateTime
  #         AttributeType: S
  #     KeySchema: # PrimaryKey 대신 이 속성 사용
  #       - AttributeName: userGithubId
  #         KeyType: HASH
  #       - AttributeName: eventDateTime
  #         KeyType: RANGE
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2
  # GitConnectionTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: GitConnection
  #     AttributeDefinitions:
  #       - AttributeName: gitId
  #         AttributeType: S
  #       - AttributeName: userId
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: gitId
  #         KeyType: HASH
  #       - AttributeName: userId
  #         KeyType: RANGE
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2
  # UserTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: User
  #     AttributeDefinitions:
  #       - AttributeName: id
  #         AttributeType: S
  #       - AttributeName: createdAt
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: id
  #         KeyType: HASH
  #       - AttributeName: createdAt
  #         KeyType: RANGE
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/default/"
