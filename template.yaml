# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  attendance-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  createAttendanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-attendance.createAttendanceHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        출석 채널에 작성된 메시지를 변환하여 출석정보를 저장하는 함수
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: Attendance
        - DynamoDBCrudPolicy:
            TableName: GitConnection
        - DynamoDBCrudPolicy:
            TableName: User
        - DynamoDBCrudPolicy:
            TableName: AttendanceGroupingDate
      Environment:
        Variables:
          # Make table names accessible as environment variables from function code during execution
          ATTENDANCE_TABLE: Attendance
          GIT_CONNECTION_TABLE: GitConnection
          USER_TABLE: User
          SLACK_INCOMING_WEBHOOK_URL: ${replace-url}
      Events:
        Api:
          Type: Api
          Properties:
            Path: /attandance
            Method: POST
  initMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/init-messages.initMessagesHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 3000
      Description:
        기존에 존재하던 메시지를 전부 불러와서 출석 정보를 저장하는 함수
      Environment:
        Variables:
          SLACK_AUTHORIZATION_TOKEN: ${replace-token}
          SLACK_INCOMING_WEBHOOK_URL: ${replace-url}
          ATTENDANCE_TABLE: Attendance
      Events:
        Api:
          Type: Api
          Properties:
            Path: /init-messages
            Method: POST
  attendanceGroupingDateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/attendance-group-by-date.attendanceGroupingByDateHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        기존 출석 정보를 년월일로 그룹핑하여 출석
      Environment:
        Variables:
          ATTENDANCE_TABLE: Attendance
          ATTENDANCE_GROUPING_DATE_TABLE: AttendanceGroupingDate
      Events:
        Api:
          Type: Api
          Properties:
            Path: /attendance/grouping-date
            Method: POST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/default/"
